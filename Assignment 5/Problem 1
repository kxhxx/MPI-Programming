#include <iostream>
#include <cuda_runtime.h>

#define N 1024 * 1024 // 1 million elements
#define THREADS_PER_BLOCK 256
#define BLOCKS (N + THREADS_PER_BLOCK - 1) / THREADS_PER_BLOCK

// -----------------------------

__device__ __constant__ float d_A[N];
__device__ __constant__ float d_B[N];
__device__ float d_C[N];

// -----------------------------

__global__ void vectorAdd() {
    int idx = threadIdx.x + blockIdx.x * blockDim.x;
    if (idx < N) {
        d_C[idx] = d_A[idx] + d_B[idx];
    }
}

// -----------------------------

float h_A[N], h_B[N], h_C[N];

int main() {
    // -----------------------------
  
    for (int i = 0; i < N; i++) {
        h_A[i] = static_cast<float>(i);
        h_B[i] = static_cast<float>(2 * i);
    }

    // -----------------------------
    
    cudaMemcpyToSymbol(d_A, h_A, sizeof(float) * N);
    cudaMemcpyToSymbol(d_B, h_B, sizeof(float) * N);

    // -----------------------------
    
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);

    cudaEventRecord(start);
    vectorAdd<<<BLOCKS, THREADS_PER_BLOCK>>>();
    cudaEventRecord(stop);

    cudaEventSynchronize(stop);

    float milliseconds = 0;
    cudaEventElapsedTime(&milliseconds, start, stop);

    // -----------------------------
    
    cudaMemcpyFromSymbol(h_C, d_C, sizeof(float) * N);

    // -----------------------------
    
    std::cout << "Sample Results:\n";
    for (int i = 0; i < 5; ++i) {
        std::cout << "h_C[" << i << "] = " << h_C[i] << std::endl;
    }

    std::cout << "\nKernel Execution Time: " << milliseconds << " ms\n";

    // -----------------------------
  
    cudaDeviceProp prop;
    cudaGetDeviceProperties(&prop, 0);

    int memoryClockKHz = prop.memoryClockRate;     // in kHz
    int memoryBusWidth = prop.memoryBusWidth;      // in bits

    
    float theoreticalBW = 2.0f * memoryClockKHz * memoryBusWidth / 8.0f / 1e6f;

    std::cout << "\n[Device Info]\n";
    std::cout << "Memory Clock Rate : " << memoryClockKHz << " kHz\n";
    std::cout << "Memory Bus Width  : " << memoryBusWidth << " bits\n";
    std::cout << "Theoretical Bandwidth: " << theoreticalBW << " GB/s\n";

    // -----------------------------
    
    size_t totalBytesRead = 2 * sizeof(float) * N;   // reading A and B
    size_t totalBytesWritten = sizeof(float) * N;    // writing C
    float totalTimeSeconds = milliseconds / 1000.0f;

    float measuredBW = (totalBytesRead + totalBytesWritten) / (totalTimeSeconds * 1e9f); // GB/s

    std::cout << "Measured Bandwidth: " << measuredBW << " GB/s\n";

    // -----------------------------
    
    cudaEventDestroy(start);
    cudaEventDestroy(stop);

    return 0;
}
