#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define N 10

void odd_even_sort(int arr[], int n) {
    for (int phase = 0; phase < n; phase++) {
        for (int i = (phase % 2 == 0) ? 0 : 1; i < n - 1; i += 2) {
            if (arr[i] > arr[i + 1]) {
                int temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
            }
        }
    }
}

int main(int argc, char** argv) {
    int rank, size, arr[N], local_arr[N / 2];
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        for (int i = 0; i < N; i++) arr[i] = rand() % 100;
        printf("Unsorted Array: ");
        for (int i = 0; i < N; i++) printf("%d ", arr[i]);
        printf("\n");
    }

    MPI_Scatter(arr, N / size, MPI_INT, local_arr, N / size, MPI_INT, 0, MPI_COMM_WORLD);
    odd_even_sort(local_arr, N / size);
    MPI_Gather(local_arr, N / size, MPI_INT, arr, N / size, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Sorted Array: ");
        for (int i = 0; i < N; i++) printf("%d ", arr[i]);
        printf("\n");
    }

    MPI_Finalize();
    return 0;
}
