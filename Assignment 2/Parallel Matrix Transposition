#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define N 4

int main(int argc, char** argv) {
    int rank, size;
    int matrix[N][N], transposed[N][N];

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int rows_per_proc = N / size;
    int local_matrix[rows_per_proc][N], local_transpose[rows_per_proc][N];

    if (rank == 0) {
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                matrix[i][j] = i * N + j + 1;
    }

    MPI_Scatter(matrix, rows_per_proc * N, MPI_INT, local_matrix, rows_per_proc * N, MPI_INT, 0, MPI_COMM_WORLD);

    for (int i = 0; i < rows_per_proc; i++)
        for (int j = 0; j < N; j++)
            local_transpose[j][i] = local_matrix[i][j];

    MPI_Gather(local_transpose, rows_per_proc * N, MPI_INT, transposed, rows_per_proc * N, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Transposed Matrix:\n");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                printf("%d ", transposed[i][j]);
            printf("\n");
        }
    }

    MPI_Finalize();
    return 0;
}
