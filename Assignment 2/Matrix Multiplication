#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define N 70

void multiply_matrices(int A[N][N], int B[N][N], int C[N][N], int rows_per_proc) {
    for (int i = 0; i < rows_per_proc; i++)
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++)
                C[i][j] += A[i][k] * B[k][j];
        }
}

int main(int argc, char** argv) {
    int rank, size;
    double start_time, run_time;
    int A[N][N], B[N][N], C[N][N];
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int rows_per_proc = N / size;
    if (rank == 0) {
        // Initialize matrices
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++) {
                A[i][j] = rand() % 10;
                B[i][j] = rand() % 10;
            }
        start_time = MPI_Wtime();
    }

    // Scatter rows of A, Broadcast B
    MPI_Bcast(B, N * N, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Scatter(A, rows_per_proc * N, MPI_INT, A, rows_per_proc * N, MPI_INT, 0, MPI_COMM_WORLD);

    multiply_matrices(A, B, C, rows_per_proc);

    MPI_Gather(C, rows_per_proc * N, MPI_INT, C, rows_per_proc * N, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        run_time = MPI_Wtime() - start_time;
        printf("Parallel execution time: %lf seconds\n", run_time);
    }

    MPI_Finalize();
    return 0;
}
